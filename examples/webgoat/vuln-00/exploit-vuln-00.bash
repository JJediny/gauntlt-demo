#!/bin/bash

# --[ STEP 00 ]--
# Get the cookie value needed for the login page
COOKIE=`jerry-curl -c jerry-curl-00.config -u /login.mvc | grep "Set-Cookie" | cut --delimiter=" " --field=2 | cut --delimiter=";" --field=1`

# Debug msg
#echo "Cookie value is $COOKIE"

# Add the cookie to the login request config
#echo "--cookie $COOKIE" >> ./jerry-curl-01.config

# --[ STEP 01 ]--
# Login to WebGoat by posting the creds
LOGIN=`jerry-curl -c jerry-curl-01.config -u /j_spring_security_check | grep "Set-Cookie" | cut --delimiter=" " --field=2 | cut --delimiter=";" --field=1`

# Debug msg
#echo "Cookie after login is $LOGIN"

# Add new cookie value to the other jerry-curl configs
echo "--cookie $LOGIN" >> ./jerry-curl-02.config
echo "--cookie $LOGIN" >> ./jerry-curl-03.config
echo "--cookie $LOGIN" >> ./jerry-curl-04.config

# --[ STEP 02 ]--
# Figure out which menu item is "Http Basics"

# First call any WebGoat menu item
jerry-curl -c jerry-curl-02.config -u '/attack?Screen=324&menu=100' > /dev/null

# Now call a menu - WebGoat expects a menu call after calling a menu item
jerry-curl -c jerry-curl-02.config -u /service/lessonmenu.mvc | jq . > temp.json

NAME=`grep -n "Http Basics" temp.json | cut --delimiter=":" --field=1`
BUMP=4
LINE=$(($NAME + $BUMP))

# Debug msg
#echo "Line is $LINE"

# Pull out the menu item we need
CMD="$LINE{p;q}" 
MENU=`sed -n $CMD temp.json | cut --delimiter="?" --field=2 | cut --delimiter="\"" --field=1`
#Screen=16&menu=100

# Debug msg
#echo "Menu is $MENU"

# --[ STEP 3 ]--
# Request the lesson for General => Http Basics
jerry-curl -c jerry-curl-03.config -u "/attack?$MENU" > /dev/null

# --[ STEP 4 ]--
# Submit the attack to the General => Http Basics page
# and use grep + wc -l to determine if the attack was successful
ATTACK=`jerry-curl -c jerry-curl-04.config -u "/attack?$MENU" | grep "successfully completed" | wc -l`

# Purposefully fail for testing purposes
# Remove the comment on the line below to force failures
#ATTACK=`jerry-curl -c jerry-curl-04.config -u "/attack?$MENU" | grep "Zanzibar" | wc -l`

# Debug msg
#echo "Attack is $ATTACK"

# --[ STEP 5 ]--
# Clear the cookies from the jerry-curl files
sed -i.bak '/cookie/d' ./jerry-curl-01.config
sed -i.bak '/cookie/d' ./jerry-curl-02.config
sed -i.bak '/cookie/d' ./jerry-curl-03.config
sed -i.bak '/cookie/d' ./jerry-curl-04.config
# And the temp files from sed
rm jerry-curl-01.config.bak
rm jerry-curl-02.config.bak
rm jerry-curl-03.config.bak
rm jerry-curl-04.config.bak
# And clean up misc temp files
rm lude
rm temp.json

# --[ STEP 6 ]--
# Set the correct exit code
# It will return a
# - 0 (error) if the vulnerability is present
# - 1 (success) if the vulnerability is fixed (aka not present)

if [ $ATTACK -eq 1 ]
then
    # Attack successful
    echo "Attack Successful"
    exit 1
else
    # Attack failed - no vuln-00 present
    echo "vuln-00 not present"
    exit 0
fi
